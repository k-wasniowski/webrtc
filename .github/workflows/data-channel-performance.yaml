name: cargo

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  test-data-channels-performance:
    name: Test Data Channels Performance
    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest"]
        toolchain:
          - stable

    runs-on: ${{ matrix.os }}
    steps:
      # Install Rust Dependencies
      - uses: actions/checkout@v3
        with:
          path: "webrtc-rs"

      - name: Install Rust ${{ matrix.toolchain }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          override: true

      - name: Update Rust
        run: rustup update stable

      # Install Go Dependencies
      - uses: actions/checkout@v3
        with:
          repository: "pion/webrtc"
          path: "webrtc-go"

      - name: Install Go
        uses: actions/setup-go@v5

      # Execute Rust Data Channels Test
      - name: Build Rust Data Channels Flow Control Example
        shell: bash
        working-directory: webrtc-rs
        run: cargo build --release --example data-channels-flow-control

      - name: Run Rust Data Channels Flow Control Example
        shell: bash
        continue-on-error: true
        working-directory: webrtc-rs
        run: timeout 60 ./target/release/examples/data-channels-flow-control > rust-output.txt

      - name: Archive Rust Data Channels Flow Control Results
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-rust-output
          path: webrtc-rs/rust-output.txt

      # Execute Go Data Channels Test
      - name: Build Go Data Channels Flow Control Example
        shell: bash
        working-directory: webrtc-go/examples/data-channels-flow-control
        run: go build main.go

      - name: Run Go Data Channels Flow Control Example
        shell: bash
        continue-on-error: true
        working-directory: webrtc-go/examples/data-channels-flow-control
        run: timeout 60 ./main 2> go-output.txt

      - name: Archive Go Data Channels Flow Control Results
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-go-output
          path: webrtc-go/examples/data-channels-flow-control/go-output.txt

  process-results:
    name: Process Results
    runs-on: ubuntu-latest
    needs: test-data-channels-performance

    strategy:
      matrix:
        os: ["Linux", "Windows"]

    steps:
      - uses: actions/checkout@v3

      - name: Download Rust Data Channels Flow Control Results
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.os }}-rust-output

      - name: Download Go Data Channels Flow Control Results
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.os }}-go-output

      - name: List artifacts
        run: ls

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Create a summary
        run: |
            pip install matplotlib
            python3 ./parser.py --Rust ./rust-output.txt --Go ./go-output.txt --System ${{ matrix.os }}
      
      - name: Upload summary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}.png
          path: ${{ matrix.os }}.png